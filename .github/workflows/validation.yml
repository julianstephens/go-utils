name: Validation

on:
  workflow_call:
    inputs:
      do_fmt:
        description: "Run formatting step"
        required: false
        default: true
        type: boolean
      do_test:
        description: "Run test step"
        required: false
        default: true
        type: boolean
      do_build:
        description: "Run build step"
        required: false
        default: true
        type: boolean
      gomod_path:
        description: "Path to go.mod (default: repo root)"
        required: false
        default: "./"
        type: string

jobs:
  validate:
    environment: validation
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "${{ inputs.gomod_path }}go.mod"
      - name: Set PR number
        id: prmeta
        run: |
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
      - name: Format code
        id: fmt
        if: ${{ inputs.DO_FMT }}
        run: |
          go fmt ./...
          exit_code=0
          if ! git diff --exit-code; then
            echo "Go code is not properly formatted"
            echo "unformatted_files<<EOF" >> $GITHUB_OUTPUT
            git diff --name-only >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit_code=1
          fi
          exit $exit_code
      - name: Run tests
        id: test
        if: ${{ inputs.DO_TEST }}
        run: |
          exit_code=0
          if ! go test -v ./... 2>&1 | tee test_output.log; then
            echo "Tests failed"
            echo "test_failures<<EOF" >> $GITHUB_OUTPUT
            grep -A 10 -B 2 "FAIL\|panic\|Error" test_output.log | head -50 >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit_code=1
          fi
          exit $exit_code
      - name: Build project
        id: build
        if: ${{ inputs.DO_BUILD }}
        run: |
          go build ./...
      - name: Failure PR Comment
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          script: |
            let output = "";
            if ( "${{ steps.fmt.outcome }}" === "failure" ) {
              output +=  `
              [Gofmt](https://pkg.go.dev/cmd/gofmt) validation
              \`\`\`
              ${{ steps.gofmt.outputs.unformatted_files }}
              \`\`\`
              `;
            }
            if ( "${{ steps.test.outcome }}" === "failure" ) {
              output +=  `
              Go Test validation
              \`\`\`
              ${{ steps.gofmt.outputs.test_failures }}
              \`\`\`
              `;
            }
            if ( "${{ steps.build.outcome }}" === "failure" ) {
              output +=  `
              Go Build failed. Please fix build errors before merging.
              `;
            }
            if (output) {
              const jobLink = `The [validation job](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) may have additional details.`
              github.rest.issues.createComment({
                issue_number: ${{ steps.prmeta.outputs.pr_number }},
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output,
              })
            }
